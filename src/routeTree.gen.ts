/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WorkshopImport } from './routes/workshop'
import { Route as ShelterImport } from './routes/shelter'
import { Route as SchoolsImport } from './routes/schools'
import { Route as SanctuaryImport } from './routes/sanctuary'
import { Route as ProjectsImport } from './routes/projects'
import { Route as ContactImport } from './routes/contact'
import { Route as AdventureImport } from './routes/adventure'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const WorkshopRoute = WorkshopImport.update({
  id: '/workshop',
  path: '/workshop',
  getParentRoute: () => rootRoute,
} as any)

const ShelterRoute = ShelterImport.update({
  id: '/shelter',
  path: '/shelter',
  getParentRoute: () => rootRoute,
} as any)

const SchoolsRoute = SchoolsImport.update({
  id: '/schools',
  path: '/schools',
  getParentRoute: () => rootRoute,
} as any)

const SanctuaryRoute = SanctuaryImport.update({
  id: '/sanctuary',
  path: '/sanctuary',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsRoute = ProjectsImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => rootRoute,
} as any)

const ContactRoute = ContactImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRoute,
} as any)

const AdventureRoute = AdventureImport.update({
  id: '/adventure',
  path: '/adventure',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/adventure': {
      id: '/adventure'
      path: '/adventure'
      fullPath: '/adventure'
      preLoaderRoute: typeof AdventureImport
      parentRoute: typeof rootRoute
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactImport
      parentRoute: typeof rootRoute
    }
    '/projects': {
      id: '/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsImport
      parentRoute: typeof rootRoute
    }
    '/sanctuary': {
      id: '/sanctuary'
      path: '/sanctuary'
      fullPath: '/sanctuary'
      preLoaderRoute: typeof SanctuaryImport
      parentRoute: typeof rootRoute
    }
    '/schools': {
      id: '/schools'
      path: '/schools'
      fullPath: '/schools'
      preLoaderRoute: typeof SchoolsImport
      parentRoute: typeof rootRoute
    }
    '/shelter': {
      id: '/shelter'
      path: '/shelter'
      fullPath: '/shelter'
      preLoaderRoute: typeof ShelterImport
      parentRoute: typeof rootRoute
    }
    '/workshop': {
      id: '/workshop'
      path: '/workshop'
      fullPath: '/workshop'
      preLoaderRoute: typeof WorkshopImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/adventure': typeof AdventureRoute
  '/contact': typeof ContactRoute
  '/projects': typeof ProjectsRoute
  '/sanctuary': typeof SanctuaryRoute
  '/schools': typeof SchoolsRoute
  '/shelter': typeof ShelterRoute
  '/workshop': typeof WorkshopRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/adventure': typeof AdventureRoute
  '/contact': typeof ContactRoute
  '/projects': typeof ProjectsRoute
  '/sanctuary': typeof SanctuaryRoute
  '/schools': typeof SchoolsRoute
  '/shelter': typeof ShelterRoute
  '/workshop': typeof WorkshopRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/adventure': typeof AdventureRoute
  '/contact': typeof ContactRoute
  '/projects': typeof ProjectsRoute
  '/sanctuary': typeof SanctuaryRoute
  '/schools': typeof SchoolsRoute
  '/shelter': typeof ShelterRoute
  '/workshop': typeof WorkshopRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/adventure'
    | '/contact'
    | '/projects'
    | '/sanctuary'
    | '/schools'
    | '/shelter'
    | '/workshop'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/adventure'
    | '/contact'
    | '/projects'
    | '/sanctuary'
    | '/schools'
    | '/shelter'
    | '/workshop'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/adventure'
    | '/contact'
    | '/projects'
    | '/sanctuary'
    | '/schools'
    | '/shelter'
    | '/workshop'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  AdventureRoute: typeof AdventureRoute
  ContactRoute: typeof ContactRoute
  ProjectsRoute: typeof ProjectsRoute
  SanctuaryRoute: typeof SanctuaryRoute
  SchoolsRoute: typeof SchoolsRoute
  ShelterRoute: typeof ShelterRoute
  WorkshopRoute: typeof WorkshopRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  AdventureRoute: AdventureRoute,
  ContactRoute: ContactRoute,
  ProjectsRoute: ProjectsRoute,
  SanctuaryRoute: SanctuaryRoute,
  SchoolsRoute: SchoolsRoute,
  ShelterRoute: ShelterRoute,
  WorkshopRoute: WorkshopRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/adventure",
        "/contact",
        "/projects",
        "/sanctuary",
        "/schools",
        "/shelter",
        "/workshop"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/adventure": {
      "filePath": "adventure.tsx"
    },
    "/contact": {
      "filePath": "contact.tsx"
    },
    "/projects": {
      "filePath": "projects.tsx"
    },
    "/sanctuary": {
      "filePath": "sanctuary.tsx"
    },
    "/schools": {
      "filePath": "schools.tsx"
    },
    "/shelter": {
      "filePath": "shelter.tsx"
    },
    "/workshop": {
      "filePath": "workshop.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
